pipeline {
    agent any

    tools {
        python 'Python3'  // This references the Python installation you configured
    }

    environment {
        // GitHub configuration
        REPO_URL = 'https://github.com/wangui-wamutitu/alx-backend-python.git'
        CREDENTIALS_ID = 'github-creds'
        
        // Docker configuration
        DOCKER_IMAGE = 'collekta/messaging-app'
        DOCKER_TAG = "latest-${env.BUILD_ID}"
        DOCKER_REGISTRY_CREDENTIALS = 'dockerhub-creds'
        
        // Application configuration
        APP_DIR = 'messaging_app'
        VENV = 'venv'
        
        // Django environment variables for testing
        SECRET_KEY = 'test-secret-key-for-ci-cd-pipeline'
        DEBUG = 'False'
        DB_ENGINE = 'sqlite3'
        DB_NAME = 'db.sqlite3'
        DJANGO_ALLOWED_HOSTS = 'localhost,127.0.0.1'
        DJANGO_SETTINGS_MODULE = 'messaging_app.settings'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: "${CREDENTIALS_ID}", url: "${REPO_URL}"
            }
        }

        stage('Verify Structure') {
            steps {
                script {
                    sh '''
                    echo "Repository Structure"
                    ls -la
                    echo ""
                    echo "Messaging App Directory"
                    if [ -d "messaging_app" ]; then
                        ls -la messaging_app/
                    else
                        echo "messaging_app directory not found!"
                        exit 1
                    fi
                    echo ""
                    echo "Python Version"
                    /usr/bin/python3 --version || echo "Python 3 not available"
                    '''
                }
            }
        }

        stage('Set Up Python Environment') {
            steps {
                script {
                    dir("${APP_DIR}") {
                        sh """
                        # Create virtual environment using system Python
                        /usr/bin/python3 -m venv ${VENV}
                        source ${VENV}/bin/activate
                        
                        # Upgrade pip and install dependencies
                        pip3 install --upgrade pip3
                        pip3 install -r messaging_app/requirements.txt
                        
                        # Verify installations
                        echo "Installed packages"
                        pip3 list
                        """
                    }
                }
            }
        }

        stage('Django System Check') {
            steps {
                script {
                    dir("${APP_DIR}") {
                        sh """
                        source ${VENV}/bin/activate
                        
                        echo "Running Django system checks"
                        python manage.py check --deploy || echo "System check completed with warnings"
                        
                        echo "Checking migrations"
                        python manage.py makemigrations --check --dry-run || echo "Migrations may be needed"
                        """
                    }
                }
            }
        }

        stage('Run Code Quality & Security Checks') {
            steps {
                script {
                    dir("${APP_DIR}") {
                        sh """
                        source ${VENV}/bin/activate
                        
                        # Run linting
                        echo "Running Flake8 linting"
                        pip3 install flake8 || echo "Flake8 installation failed"
                        flake8 . --count --max-line-length=88 --extend-ignore=E203,W503 --show-source --statistics || echo "Flake8 check completed"
                        """
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    dir("${APP_DIR}") {
                        sh """
                        source ${VENV}/bin/activate
                        
                        # Create test results directory
                        mkdir -p test-results
                        
                        # Run tests with coverage
                        python -m pytest \
                            --junitxml=test-results/results.xml \
                            --cov=. \
                            --cov-report=xml:coverage.xml \
                            --cov-report=html:htmlcov/ \
                            --cov-report=term-missing || echo "Tests completed with some failures"
                        """
                    }
                }
            }
        }

        stage('Publish Results') {
            steps {
                script {
                    // Publish test results
                    junit "${APP_DIR}/test-results/results.xml"
                    
                    // Archive reports
                    dir("${APP_DIR}") {
                        archiveArtifacts artifacts: 'htmlcov/**', allowEmptyArchive: true
                        archiveArtifacts artifacts: 'coverage.xml', allowEmptyArchive: true
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Check if Docker is available and daemon is running
                    def dockerAvailable = sh(script: 'docker info >/dev/null 2>&1', returnStatus: true) == 0
                    
                    if (dockerAvailable) {
                        dir("${APP_DIR}") {
                            sh """
                            # Verify Dockerfile exists
                            if [ ! -f "Dockerfile" ]; then
                                echo "ERROR: Dockerfile not found!"
                                exit 1
                            fi
                            
                            # Build Docker image
                            docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                            
                            echo "Docker image built successfully:"
                            docker images | grep ${DOCKER_IMAGE} || true
                            """
                        }
                    } else {
                        echo "Docker daemon not available, skipping Docker build"
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Check if Docker is available and daemon is running
                    def dockerAvailable = sh(script: 'docker info >/dev/null 2>&1', returnStatus: true) == 0
                    
                    if (dockerAvailable) {
                        withCredentials([usernamePassword(
                            credentialsId: "${DOCKER_REGISTRY_CREDENTIALS}",
                            usernameVariable: 'DOCKER_USERNAME',
                            passwordVariable: 'DOCKER_PASSWORD'
                        )]) {
                            sh """
                            echo "=== Pushing Docker Image ==="
                            
                            # Login to Docker Hub
                            echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
                            
                            # Push the image
                            docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                            
                            echo "Successfully pushed: ${DOCKER_IMAGE}:${DOCKER_TAG}"
                            """
                        }
                    } else {
                        echo "Docker daemon not available, skipping Docker push"
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                echo 'Pipeline Cleanup'
                
                // Archive any remaining artifacts
                dir("${APP_DIR}") {
                    archiveArtifacts artifacts: 'test-results/*.xml', allowEmptyArchive: true
                }
                
                // Clean up Docker resources if Docker is available
                sh '''
                if docker info >/dev/null 2>&1; then
                    docker logout || true
                    docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true
                    docker image prune -f || true
                fi
                '''
                
                // Clean up virtual environment
                dir("${APP_DIR}") {
                    sh 'rm -rf venv || true'
                }
            }
        }
        
        success {
            script {
                def message = """
                Build Success!
                Project: MessagingApp
                Build: #${env.BUILD_NUMBER}
                """
                echo message
            }
        }
        
        failure {
            script {
                def message = """
                Build Failed!
                Project: MessagingApp
                Build: #${env.BUILD_NUMBER}
                
                Check the console output for details.
                """
                echo message
            }
        }
        
        unstable {
            echo 'Build is unstable. Some tests may have failed.'
        }
    }
}