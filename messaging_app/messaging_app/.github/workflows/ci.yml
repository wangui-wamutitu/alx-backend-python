name: Django CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DB }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=3
    env:
        DATABASE_NAME: ${{ secrets.MYSQL_DB }}
        DATABASE_USER: ${{ secrets.MYSQL_USER }}
        DATABASE_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        DATABASE_HOST: 127.0.0.1
        DATABASE_PORT: 3306
        DJANGO_SETTINGS_MODULE: messaging_app.settings

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        cd messaging_app
        python -m pip install --upgrade pip
        pip3 install -r requirements.txt
        pip3 install mysqlclient flake8 coverage pytest pytest-cov

    - name: Wait for MySQL
      run: |
        sudo apt-get install -y mysql-client
        until mysqladmin ping -h 127.0.0.1 -u$DB_USER -p$DB_PASSWORD --silent; do
          echo "Waiting for database connection..."
          sleep 5
        done

    - name: Run flake8 linting
      run: |
        cd messaging_app
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run migrations
      run: |
        cd messaging_app
        python manage.py makemigrations
        python manage.py migrate
      env:
        DATABASE_URL: mysql://${{ secrets.MYSQL_USER }}:${{ secrets.MYSQL_PASSWORD }}@localhost:3306/${{ secrets.MYSQL_DB }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}

    - name: Run tests with coverage
      run: |
        cd messaging_app
        coverage run --source='.' manage.py test --noinput --verbosity=2
        coverage report
        coverage xml -o coverage.xml
      env:
        DATABASE_URL: mysql://${{ secrets.MYSQL_USER }}:${{ secrets.MYSQL_PASSWORD }}@localhost:3306/${{ secrets.MYSQL_DB }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: messaging_app/coverage.xml